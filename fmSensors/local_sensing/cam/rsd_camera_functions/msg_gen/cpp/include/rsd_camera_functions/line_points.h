/* Auto-generated by genmsg_cpp for file /home/maik/catkin_ws/src/rsd_camera_functions/msg/line_points.msg */
#ifndef RSD_CAMERA_FUNCTIONS_MESSAGE_LINE_POINTS_H
#define RSD_CAMERA_FUNCTIONS_MESSAGE_LINE_POINTS_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace rsd_camera_functions
{
template <class ContainerAllocator>
struct line_points_ {
  typedef line_points_<ContainerAllocator> Type;

  line_points_()
  : x1(0.0)
  , y1(0.0)
  , x2(0.0)
  , y2(0.0)
  {
  }

  line_points_(const ContainerAllocator& _alloc)
  : x1(0.0)
  , y1(0.0)
  , x2(0.0)
  , y2(0.0)
  {
  }

  typedef float _x1_type;
  float x1;

  typedef float _y1_type;
  float y1;

  typedef float _x2_type;
  float x2;

  typedef float _y2_type;
  float y2;


  typedef boost::shared_ptr< ::rsd_camera_functions::line_points_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rsd_camera_functions::line_points_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct line_points
typedef  ::rsd_camera_functions::line_points_<std::allocator<void> > line_points;

typedef boost::shared_ptr< ::rsd_camera_functions::line_points> line_pointsPtr;
typedef boost::shared_ptr< ::rsd_camera_functions::line_points const> line_pointsConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::rsd_camera_functions::line_points_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::rsd_camera_functions::line_points_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace rsd_camera_functions

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::rsd_camera_functions::line_points_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::rsd_camera_functions::line_points_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::rsd_camera_functions::line_points_<ContainerAllocator> > {
  static const char* value() 
  {
    return "1d74979d8119401281d48677f845994f";
  }

  static const char* value(const  ::rsd_camera_functions::line_points_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x1d74979d81194012ULL;
  static const uint64_t static_value2 = 0x81d48677f845994fULL;
};

template<class ContainerAllocator>
struct DataType< ::rsd_camera_functions::line_points_<ContainerAllocator> > {
  static const char* value() 
  {
    return "rsd_camera_functions/line_points";
  }

  static const char* value(const  ::rsd_camera_functions::line_points_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::rsd_camera_functions::line_points_<ContainerAllocator> > {
  static const char* value() 
  {
    return "float32 x1\n\
float32 y1\n\
float32 x2\n\
float32 y2\n\
\n\
";
  }

  static const char* value(const  ::rsd_camera_functions::line_points_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::rsd_camera_functions::line_points_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::rsd_camera_functions::line_points_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.x1);
    stream.next(m.y1);
    stream.next(m.x2);
    stream.next(m.y2);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct line_points_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rsd_camera_functions::line_points_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::rsd_camera_functions::line_points_<ContainerAllocator> & v) 
  {
    s << indent << "x1: ";
    Printer<float>::stream(s, indent + "  ", v.x1);
    s << indent << "y1: ";
    Printer<float>::stream(s, indent + "  ", v.y1);
    s << indent << "x2: ";
    Printer<float>::stream(s, indent + "  ", v.x2);
    s << indent << "y2: ";
    Printer<float>::stream(s, indent + "  ", v.y2);
  }
};


} // namespace message_operations
} // namespace ros

#endif // RSD_CAMERA_FUNCTIONS_MESSAGE_LINE_POINTS_H

