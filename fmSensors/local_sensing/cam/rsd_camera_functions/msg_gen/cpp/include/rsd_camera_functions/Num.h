/* Auto-generated by genmsg_cpp for file /home/maik/catkin_ws/src/rsd_camera_functions/msg/Num.msg */
#ifndef RSD_CAMERA_FUNCTIONS_MESSAGE_NUM_H
#define RSD_CAMERA_FUNCTIONS_MESSAGE_NUM_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace rsd_camera_functions
{
template <class ContainerAllocator>
struct Num_ {
  typedef Num_<ContainerAllocator> Type;

  Num_()
  : distance(0)
  , angle(0.0)
  {
  }

  Num_(const ContainerAllocator& _alloc)
  : distance(0)
  , angle(0.0)
  {
  }

  typedef int64_t _distance_type;
  int64_t distance;

  typedef float _angle_type;
  float angle;


  typedef boost::shared_ptr< ::rsd_camera_functions::Num_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rsd_camera_functions::Num_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct Num
typedef  ::rsd_camera_functions::Num_<std::allocator<void> > Num;

typedef boost::shared_ptr< ::rsd_camera_functions::Num> NumPtr;
typedef boost::shared_ptr< ::rsd_camera_functions::Num const> NumConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::rsd_camera_functions::Num_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::rsd_camera_functions::Num_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace rsd_camera_functions

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::rsd_camera_functions::Num_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::rsd_camera_functions::Num_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::rsd_camera_functions::Num_<ContainerAllocator> > {
  static const char* value() 
  {
    return "55a2291e28b1cc710300f5aa7dba6236";
  }

  static const char* value(const  ::rsd_camera_functions::Num_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x55a2291e28b1cc71ULL;
  static const uint64_t static_value2 = 0x0300f5aa7dba6236ULL;
};

template<class ContainerAllocator>
struct DataType< ::rsd_camera_functions::Num_<ContainerAllocator> > {
  static const char* value() 
  {
    return "rsd_camera_functions/Num";
  }

  static const char* value(const  ::rsd_camera_functions::Num_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::rsd_camera_functions::Num_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int64 distance\n\
\n\
float32 angle\n\
\n\
";
  }

  static const char* value(const  ::rsd_camera_functions::Num_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::rsd_camera_functions::Num_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::rsd_camera_functions::Num_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.distance);
    stream.next(m.angle);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct Num_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rsd_camera_functions::Num_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::rsd_camera_functions::Num_<ContainerAllocator> & v) 
  {
    s << indent << "distance: ";
    Printer<int64_t>::stream(s, indent + "  ", v.distance);
    s << indent << "angle: ";
    Printer<float>::stream(s, indent + "  ", v.angle);
  }
};


} // namespace message_operations
} // namespace ros

#endif // RSD_CAMERA_FUNCTIONS_MESSAGE_NUM_H

